/**
 * Shop class.
 * @constructor
 */
class Shop {
  constructor () {
    this.categories = [{
      name: 'buildings',
      items: [
        {id: 0, name: 'cursor', price: 15, cps: 0.1},
        {id: 1, name: 'grandmother', price: 100, cps: 8},
        {id: 2, name: 'bakery', price: 4000, cps: 75},
        {id: 3, name: 'factory', price: 85000, cps: 400},
        {id: 4, name: 'cookie town', price: 900000, cps: 5000}
      ]
    }, {
      name: 'upgrades',
      items: [
        {id: 5, name: 'cursor', price: 500, cpc: 4}
      ]
    }]
  }

  /**
   * Callback for buying specified item
   *
   * @callback buyItemCallback
   * @param {object} result - Callback result
   *   @param {string} result.feedback - Information about transaction result
   *   @param {object} result.item - Bought item
   *     @param {number} result.item.price - Price of the item
   *     @param {number} result.item.cps - Cookies per second generated by the item
   *   @param {number} result.change - Cookies change
   *   @param {boolean} result.succeeded - Boolean whether transaction succeeded
   */

  /**
   * Buy specified item
   *
   * @param {object} info - Information about transaction
   *   @param {string} info.id - ID of the item wished to buy
   *   @param {number} info.cookies - All cookies owned by user
   * @param {buyItemCallback} callback - Callback with result object
   */
  buy ({id, cookies}, callback) {
    var result = {feedback: '', item: {}, change: cookies, succeeded: false}
    result.item = this.categories.map(category => {
      return category.items.find(item => item.id === id)
    })[0]

    if (result.item === 'undefined') {
      result.feedback = "Item with specified ID doesn't exist!"
    } else if (cookies < result.item.price) {
      result.feedback = "You don't have enough money to buy that item!"
    } else {
      result.feedback = 'Item has been bought successfully'
      result.change -= result.item.price
      result.succeeded = true
    }
    callback(result)
  }
}

export default Shop
